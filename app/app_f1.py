import streamlit as st
import pandas as pd
import os

st.set_page_config(layout="wide", page_title="Analyse Donn√©es F1")

st.title("üèéÔ∏è Visualisation des Donn√©es de Formule 1")
st.markdown("Utilisez les filtres dans la barre lat√©rale pour explorer les donn√©es.")

SESSION_FILES = {
    "Course": "data/f1_2015-2024_race.csv",
    "Qualifications": "data/f1_2015-2024_qualifying.csv",
    "Essais Libres 1": "data/f1_2015-2024_practice_1.csv",
    "Essais Libres 2": "data/f1_2015-2024_practice_2.csv",
    "Essais Libres 3": "data/f1_2015-2024_practice_3.csv",
    "Meilleur Tour en Course": "data/f1_2015-2024_fastest_lap.csv",
    "Arr√™ts aux Stands": "data/f1_2015-2024_pit_stop.csv",
    "Grille de D√©part": "data/f1_2015-2024_starting_grid.csv"
}

YEAR_COLUMN = 'year'
GP_NAME_COLUMN = 'race_name'

@st.cache_data
def load_data(file_path):
    """Charge les donn√©es depuis un fichier CSV."""
    if os.path.exists(file_path):
        try:
            df = pd.read_csv(file_path)            
            if YEAR_COLUMN in df.columns:
                df[YEAR_COLUMN] = pd.to_numeric(df[YEAR_COLUMN], errors='coerce')
            return df
        except Exception as e:
            st.error(f"Erreur lors du chargement du fichier {file_path}: {e}")
            return pd.DataFrame()
    else:
        st.warning(f"Le fichier {file_path} est introuvable.")
        return pd.DataFrame()

# --- BARRE LAT√âRALE POUR LES FILTRES ---
st.sidebar.header("‚öôÔ∏è Filtres de S√©lection")

# 1. S√©lection du type de session
selected_session_name = st.sidebar.selectbox(
    "Choisissez le type de session :",
    options=list(SESSION_FILES.keys())
)

# Charger les donn√©es pour la session s√©lectionn√©e
file_to_load = SESSION_FILES.get(selected_session_name)
df_current_session = pd.DataFrame()

if file_to_load:
    df_current_session = load_data(file_to_load)
else:
    st.sidebar.error("Type de session non valide s√©lectionn√©.")

# V√©rifier si les donn√©es ont √©t√© charg√©es et si les colonnes cl√©s existent
if not df_current_session.empty:
    if YEAR_COLUMN not in df_current_session.columns:
        st.sidebar.warning(f"La colonne '{YEAR_COLUMN}' est manquante dans {file_to_load}. Le filtrage par ann√©e pourrait ne pas fonctionner.")
    if GP_NAME_COLUMN not in df_current_session.columns:
        st.sidebar.warning(f"La colonne '{GP_NAME_COLUMN}' est manquante dans {file_to_load}. Le filtrage par Grand Prix pourrait ne pas fonctionner.")

    # 2. S√©lection de l'ann√©e
    available_years = []
    if YEAR_COLUMN in df_current_session.columns:
        available_years = sorted(df_current_session[YEAR_COLUMN].dropna().unique().astype(int), reverse=True)
    
    selected_years = []
    if available_years:
        selected_years = st.sidebar.multiselect(
            "Choisissez l'ann√©e(s) :",
            options=available_years,
            default=available_years[0] if available_years else [] # S√©lectionne la plus r√©cente par d√©faut
        )
    else:
        st.sidebar.text("Aucune donn√©e d'ann√©e disponible pour cette session.")

    # Filtrer les donn√©es par ann√©e s√©lectionn√©e pour populer les GP
    df_filtered_by_year = df_current_session.copy()
    if selected_years and YEAR_COLUMN in df_filtered_by_year.columns:
        df_filtered_by_year = df_filtered_by_year[df_filtered_by_year[YEAR_COLUMN].isin(selected_years)]

    # 3. S√©lection du Grand Prix
    available_gp_names = []
    if GP_NAME_COLUMN in df_filtered_by_year.columns:
        available_gp_names = sorted(df_filtered_by_year[GP_NAME_COLUMN].dropna().unique())
    
    selected_gp_names = []
    if available_gp_names:
        selected_gp_names = st.sidebar.multiselect(
            "Choisissez le/les Grand Prix :",
            options=available_gp_names,
            default=available_gp_names if len(available_gp_names) < 10 else available_gp_names[:3] # S√©lectionne tous si peu, sinon les 3 premiers
        )
    else:
        st.sidebar.text("Aucun nom de GP disponible pour cette s√©lection.")

    # Filtrer les donn√©es par GP s√©lectionn√©
    df_filtered_by_gp = df_filtered_by_year.copy()
    if selected_gp_names and GP_NAME_COLUMN in df_filtered_by_gp.columns:
        df_filtered_by_gp = df_filtered_by_gp[df_filtered_by_gp[GP_NAME_COLUMN].isin(selected_gp_names)]

    # 4. S√©lection des colonnes √† afficher
    available_columns = df_filtered_by_gp.columns.tolist()
    
    # Exclure par d√©faut certaines colonnes si elles existent (ex: index inutiles)
    default_columns_to_exclude = ['Unnamed: 0', 'index'] 
    default_selected_columns = [col for col in available_columns if col not in default_columns_to_exclude]

    selected_columns = []
    if available_columns:
        selected_columns = st.sidebar.multiselect(
            "Choisissez les informations √† afficher :",
            options=available_columns,
            default=default_selected_columns
        )
    else:
        st.sidebar.text("Aucune colonne disponible.")

    # --- AFFICHAGE DES DONN√âES FILTR√âES ---
    st.subheader(f"Donn√©es pour : {selected_session_name}")

    if not df_filtered_by_gp.empty and selected_columns:
        # Afficher le nombre de lignes r√©sultantes
        st.markdown(f"**{len(df_filtered_by_gp)} lignes trouv√©es pour votre s√©lection.**")
        
        # Afficher le DataFrame
        st.dataframe(df_filtered_by_gp[selected_columns], use_container_width=True)
        
        # Option pour t√©l√©charger les donn√©es filtr√©es
        @st.cache_data
        def convert_df_to_csv(df):
            return df.to_csv(index=False).encode('utf-8')

        csv_data = convert_df_to_csv(df_filtered_by_gp[selected_columns])
        st.download_button(
           label="üì• T√©l√©charger les donn√©es filtr√©es (CSV)",
           data=csv_data,
           file_name=f"{selected_session_name}_filtre.csv",
           mime="text/csv",
        )

    elif df_current_session.empty:
        st.info(f"Aucune donn√©e n'a pu √™tre charg√©e pour la session '{selected_session_name}'. V√©rifiez que le fichier '{file_to_load}' existe et est correct.")
    elif not selected_columns:
        st.info("Veuillez s√©lectionner au moins une colonne √† afficher.")
    else:
        st.info("Aucune donn√©e ne correspond √† vos filtres actuels. Essayez d'√©largir votre s√©lection.")

else:
    if file_to_load:
        st.error(f"Impossible de charger les donn√©es pour la session s√©lectionn√©e ({selected_session_name}). Assurez-vous que le fichier '{file_to_load}' est pr√©sent dans le m√™me dossier que le script et qu'il est lisible.")
    else:
        st.info("Veuillez s√©lectionner un type de session dans la barre lat√©rale.")

st.sidebar.markdown("---")
st.sidebar.markdown("Application d√©velopp√©e avec Streamlit.")
